# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Album {
  author: User
  authorId: String!
  colors: [Int!]!
  coverExt: String!
  createdAt: DateTime!
  description: String
  groupId: String
  id: String!
  images: [Image!]
  lockStatus: LockingStatus!
  rating: SafetyRating!
  title: String
  updatedAt: DateTime!
  userFavouriteIds: [String!]!
  userFavourites: [User!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetImageArgs {
  amount: Int = 10
  cursor: Int = 0
}

type Image {
  album: Album!
  albumId: String!
  author: User
  authorId: String!
  colors: [Int!]!
  createdAt: DateTime!
  description: String
  groupId: String
  id: String!
  imageExt: String!
  lockStatus: LockingStatus!
  rating: SafetyRating!
  title: String
  updatedAt: DateTime!
  userFavouriteIds: [String!]!
  userFavourites: [User!]
}

type JwtResponse {
  accessToken: String!
}

enum LockingStatus {
  HIDDEN
  LOCKED
  NONE
}

type Mutation {
  createAlbum(colors: [Int!]!, description: String, title: String): Album!
  createImage(albumId: String!, colors: [Int!]!, description: String, imageExt: String, title: String): Image!
  createUser(bio: String, email: String!, nickname: String, password: String, username: String!): Boolean!
  deleteAlbum(albumId: String!): Boolean!
  deleteImage(imageId: String!): Boolean!
  favouriteAlbum(albumId: String!, unfavourite: Boolean!): Boolean!
  favouriteImage(imageId: String!, unfavourite: Boolean!): Boolean!
  favouriteUser(unfavourite: Boolean!, userId: String!): Boolean!
  login(emailOrUsername: String!, password: String!): JwtResponse!
  reportAlbum(albumId: String!, reason: String!): Boolean!
  reportImage(imageId: String!, reason: String!): Boolean!
  reportUser(reason: String!, userId: String!): Boolean!
  updateAlbum(albumId: String!, input: UpdateAlbumInput!): Album!
  updateImage(imageId: String!, input: UpdateImageInput!): Image!
  updateUser(authorId: String!, bio: String, nickname: String): Boolean!
}

enum PremiumFeature {
  CUSTOM_PROFILE
  UNLIMITED_UPLOADS
}

type Query {
  album(id: String!): Album
  albums(amount: Int = 10, cursor: Int = 0): [Album!]!
  image(id: String!): Image
  images(amount: Int = 10, cursor: Int = 0): [Image!]!
  imagesForAlbum(albumId: String!, args: GetImageArgs!): [Image!]!
  report(id: String!): Report
  reports: [Report!]!
  reportsForAlbum(albumId: String!): [Report!]!
  reportsForImage(imageId: String!): [Report!]!
  reportsForUser(userId: String!): [Report!]!
  searchAlbums(query: String!): [SearchDocument!]!
  searchImages(query: String!): [SearchDocument!]!
  searchUsers(query: String!): [SearchUserDocument!]!
  user(id: String): User
}

type Report {
  album: Album
  albumId: String
  assignee: User
  assigneeId: String
  createdAt: DateTime!
  id: String!
  image: Image
  imageId: String
  reason: String!
  reportee: User
  reporteeId: String
  user: User
  userId: String
}

enum SafetyRating {
  MATURE
  NOT_SAFE
  SAFE
  TRUSTED
  UNKNOWN
}

type SearchDocument {
  authorId: String!
  colors: [Int!]!
  createdAt: DateTime!
  description: String!
  id: String!
  title: String!
  updatedAt: DateTime!
}

type SearchUserDocument {
  bio: String
  createdAt: DateTime!
  id: String!
  nickname: String
  updatedAt: DateTime!
  username: String!
}

input UpdateAlbumInput {
  colors: [Int!]
  description: String
  title: String
}

input UpdateImageInput {
  colors: [Int!]
  description: String
  imageExt: String
  title: String
}

type User {
  albums(skip: Float, take: Float): [Album!]
  avatarSourceId: String
  avatarUrl: String
  badges: [UserBadge!]!
  bannerExt: String!
  bio: String
  createdAt: DateTime!
  email: String!
  favouriteAlbums(skip: Float, take: Float): [Album!]
  favouriteImages(skip: Float, take: Float): [Image!]
  favouriteUsers(skip: Float, take: Float): [User!]
  id: String!
  images(skip: Float, take: Float): [Image!]
  lockStatus: LockingStatus!
  nickname: String
  permissions: Int!
  premiumFeatures: [PremiumFeature!]!
  updatedAt: DateTime!
  userFavouriteIds: [String!]!
  userFavourites: [User!]
  username: String!
}

enum UserBadge {
  ADMINISTRATOR
  MATURE
  MODERATOR
  NOT_SAFE
  PREMIUM
  SAFE
  SUPERADMIN
  TRUSTED
}